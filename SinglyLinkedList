//singly linkedlist- creation and traversal, insertion and deletion
#include <iostream>
using namespace std;
class Node{
      public:
        int data;
        Node* next;//pointer of type Node

        //constructor for creating first node
        Node(int data){
            this->data= data;
            this->next= NULL;
        }
        //destructor to free memory
        ~Node(){
            int value = this->data;
            
            if(this->next != NULL){
                delete next;
                this->next = NULL;
           
            }
            cout<<"memory free for data "<<value<<endl;
        }

        
};
        void insertAtHead(Node* &head, int d){
            //new node create
            Node* temp= new Node(d);
            temp->next=head;
            head= temp;
        }
        
       
        void insertAtTail(Node* &tail, int d){
            Node* temp = new Node(d);
            tail->next=temp;
            tail=temp;
            
        }
        void insertAtLoc(Node* &tail, Node* &head, int d, int position ){
            //handling case where position =1 
            if(position==1){
                insertAtHead(head,d);
                  return;
            }
          
            else{
                 //create temp node
             Node* temp=head;
             //inserting at tail
             Node* nodeToInsert = new Node(d);
             int count=1;
             while(count < position-1){
                 temp=temp->next;
                 count++;
             }
             
             //inserting at last position
             if(temp->next == NULL){
                insertAtTail(tail,d);
                return;
            }
             nodeToInsert->next =temp->next;
             temp->next= nodeToInsert;
            }
            
        }
      void deleteNode( int position, Node* &head){
      
       if(position ==1){
           // as there is no prev node
           Node* prev = head;
           
           head= head->next;
           //memory free start node
           prev -> next = NULL;
           delete prev;
           
       }else{
           //deleting middle or last node
           Node* curr= head;
           Node* prev= NULL;
           int count=1;
           while(count<=position){
               prev = curr;
              curr = curr -> next;
               count++;
           }
           prev -> next = curr->next;
           //memory free start node
           curr->next= NULL;
           delete curr;
           
       }
            
        }
        
         void print(Node* &head){
            //creating a temporary pointer
            Node* temp = head;
            
            while(temp != NULL ){
                cout<<temp-> data<<" ";
               
                temp = temp->next;
            }
            cout<<endl;
        }
        
        
        
int main() {
    //memory in heap
    Node* node1= new Node(10);
        //head pointed to node1
     Node* head=node1;
      Node* tail=node1;
    print(head);
    // cout<< node1 -> data <<endl;
    // cout<< node1 -> next <<endl;
    //arrow becuz of pointer
    
    insertAtHead(head, 15);
    print(head);
    
    insertAtTail(tail, 3);
    print(head);
    
    insertAtLoc(tail,head,44,4);
    print(head);

    deleteNode(1,head);
    print(head);

    // cout<<"head "<<head->data<<endl;
    // cout<<"tail "<<tail->data<<endl;
    return 0;
}
